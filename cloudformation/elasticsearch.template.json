{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS Cloudformation template for Elasticseach example",
  "Parameters" : {
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "t2.large" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "elasticsearch-example",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "InstanceID": {
      "Description": "Instance ID",
      "Type": "String",
      "Default" : "ami-4ae1fb5d"
    }
  },
  "Resources" : {
   "VPC" : {
     "Type" : "AWS::EC2::VPC",
     "Properties" : {
       "CidrBlock" : "10.0.0.0/16",
       "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
     }
   },
   "Subnet" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
       "VpcId" : { "Ref" : "VPC" },
       "CidrBlock" : "10.0.0.0/24",
       "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
     }
   },
   "InternetGateway" : {
     "Type" : "AWS::EC2::InternetGateway",
     "Properties" : {
       "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
     }
   },
   "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
   },
   "RouteTable" : {
     "Type" : "AWS::EC2::RouteTable",
     "Properties" : {
       "VpcId" : {"Ref" : "VPC"},
       "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
     }
   },
   "Route" : {
     "Type" : "AWS::EC2::Route",
     "DependsOn" : "AttachGateway",
     "Properties" : {
       "RouteTableId" : { "Ref" : "RouteTable" },
       "DestinationCidrBlock" : "0.0.0.0/0",
       "GatewayId" : { "Ref" : "InternetGateway" }
     }
   },
   "SubnetRouteTableAssociation" : {
     "Type" : "AWS::EC2::SubnetRouteTableAssociation",
     "Properties" : {
       "SubnetId" : { "Ref" : "Subnet" },
       "RouteTableId" : { "Ref" : "RouteTable" }
     }
   },
   "NetworkAcl" : {
     "Type" : "AWS::EC2::NetworkAcl",
     "Properties" : {
       "VpcId" : {"Ref" : "VPC"},
       "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
     }
   },
   "InboundSSHNetworkAclEntry" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
       "NetworkAclId" : {"Ref" : "NetworkAcl"},
       "RuleNumber" : "100",
       "Protocol" : "6",
       "RuleAction" : "allow",
       "Egress" : "false",
       "CidrBlock" : { "Ref" : "SSHLocation"},
       "PortRange" : {"From" : "22", "To" : "22"}
     }
   },
   "InboundGithubNetworkAclEntry" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
       "NetworkAclId" : {"Ref" : "NetworkAcl"},
       "RuleNumber" : "101",
       "Protocol" : "6",
       "RuleAction" : "allow",
       "Egress" : "false",
       "CidrBlock" : "0.0.0.0/0",
       "PortRange" : {"From" : "1024", "To" : "65535"}
     }
   },
   "OutBoundResponsePortsNetworkAclEntry" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
       "NetworkAclId" : {"Ref" : "NetworkAcl"},
       "RuleNumber" : "100",
       "Protocol" : "6",
       "RuleAction" : "allow",
       "Egress" : "true",
       "CidrBlock" : { "Ref" : "SSHLocation"},
       "PortRange" : {"From" : "1024", "To" : "65535"}
     }
   },
   "OutBoundHTTPSPortsNetworkAclEntry" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
       "NetworkAclId" : {"Ref" : "NetworkAcl"},
       "RuleNumber" : "101",
       "Protocol" : "6",
       "RuleAction" : "allow",
       "Egress" : "true",
       "CidrBlock" : "0.0.0.0/0",
       "PortRange" : {"From" : "443", "To" : "443"}
     }
   },
   "OutBoundHTTPPortsNetworkAclEntry" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
       "NetworkAclId" : {"Ref" : "NetworkAcl"},
       "RuleNumber" : "102",
       "Protocol" : "6",
       "RuleAction" : "allow",
       "Egress" : "true",
       "CidrBlock" : "0.0.0.0/0",
       "PortRange" : {"From" : "80", "To" : "80"}
     }
   },
   "SubnetNetworkAclAssociation" : {
     "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
     "Properties" : {
       "SubnetId" : { "Ref" : "Subnet" },
       "NetworkAclId" : { "Ref" : "NetworkAcl" }
     }
   },
   "IPAddress" : {
     "Type" : "AWS::EC2::EIP",
     "DependsOn" : "AttachGateway",
     "Properties" : {
       "Domain" : "vpc",
       "InstanceId" : { "Ref" : "ElasticsearchExample" }
     }
   },
   "InstanceSecurityGroup" : {
     "Type" : "AWS::EC2::SecurityGroup",
     "Properties" : {
       "VpcId" : { "Ref" : "VPC" },
       "GroupDescription" : "Enable SSH access via port 22",
       "SecurityGroupIngress" : [
         {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
     }
   },
   "ElasticsearchExampleRole" : {
     "Type": "AWS::IAM::Role",
     "Properties" : {
       "AssumeRolePolicyDocument" : {
         "Statement" : [
           {
             "Effect" : "Allow",
             "Principal" : { "Service" : [ "ec2.amazonaws.com" ] },
             "Action" : [ "sts:AssumeRole" ]
           }
         ]
       },
       "Path" : "/",
       "Policies" : [ {
         "PolicyName" : "read-only",
         "PolicyDocument" : {
           "Statement" : [ { "Effect" : "Allow", "Action": [ "ec2:Describe*", "s3:Get*", "s3:List*" ], "Resource":"*" } ]
           }
         }]
     }
   },
   "ElasticsearchExampleProfile" : {
     "Type" : "AWS::IAM::InstanceProfile",
     "Properties" : {
       "Path" : "/",
       "Roles" : [ { "Ref" : "ElasticsearchExampleRole" } ]
     }
   },
    "ElasticsearchExample" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment" : "Install Elasticsearch"
      },
        "Properties" : {
        "ImageId" : { "Ref" : "InstanceID" },
        "InstanceType" : { "Ref" : "InstanceType" },
        "NetworkInterfaces": [ {
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "GroupSet": [ { "Ref" : "InstanceSecurityGroup" } ],
          "SubnetId": { "Ref" : "Subnet" }
          }],
        "BlockDeviceMappings" : [
            {
              "DeviceName" : "/dev/sda1",
              "Ebs" : {
                "VolumeType" : "gp2",
                "VolumeSize" : "20"
                }
              }],
        "Tags": [{"Key": "Name", "Value": { "Ref" : "KeyName"}}],
        "IamInstanceProfile" : { "Ref" : "ElasticsearchExampleProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "echo \"Hello World\" >> hello-world.txt\n",
             "cd /opt/ \n",
             "echo \"part .01\" >> /part_01.txt \n",
             "curl -LO https://github.com/jharrington22/elasticsearch-example/archive/master.tar.gz\n",
             "echo \"part 1\" >> /part_1.txt \n",
             "tar -xzvf master.tar.gz\n",
             "apt-get update && apt-get install ruby ruby-dev build-essential -y && gem install berkshelf >> /install_log.txt 2>&1\n",
             "echo \"part 1.1\" >> /part_1.1.txt \n",
             "cd /opt/elasticsearch-example-master/elasticsearch-example-cookbook \n",
             "berks vendor /opt/cookbooks/\n",
             "echo \"part 2\" >> /part_2.txt \n",
             "cd /opt/ \n",
             "chef-client -z -o elasticsearch-example-cookbook\n",
             "echo \"part 2.1\" >> /part_2.1.txt \n",
             "#mkdir /etc/chef/\n",
             "#curl -O https://bootstrap.pypa.io/get-pip.py\n",
             "#python get-pip.py\n",
             "#pip install awscli\n"
        ]]}}
      }
    }
  },
  "Outputs" : {
    "URL" : {
      "Value" : { "Fn::Join" : [ "", ["http://", { "Fn::GetAtt" : ["ElasticsearchExample", "PublicIp"] }]]},
      "Description" : "Newly created application URL"
    }
  }
}
